// Maintainers, please refer to the style guide here:
//     https://developers.google.com/protocol-buffers/docs/style
syntax = "proto3";
package archivist.v2;
option go_package="github.com/datatrails/go-datatrails-common-api-gen/assets/v2/assets;assets";
import "google/protobuf/timestamp.proto";

// MerkeLogCommit provides the log entry details for a single mmr leaf.
message MerkleLogCommit {

    /* The mmr index */
    uint64 index = 1;

    /* time ordered and strictly unique per tenant. system wide unique with very
     * reasonable operational assumptions. prefixed with time epoch if len > 8
     * bytes (after conversion back from hex). */
    string idtimestamp = 2;
}

message MerkleLogConfirm {

    // The following correspond to mmrblobs.MMRState
    uint64 mmr_size = 1;

    bytes root = 2;
    // The regular unix time the root was signed
    int64 timestamp = 3;
    // The idtimestamp of the last leaf under mmr_size. prefixed with time epoch if len > 8 bytes (after conversion back from hex)
    string idtimestamp = 4;
    // The signed merkle tree head state at mmr_size. Contains COSE Sign1 formatted message.
    bytes signed_tree_head = 5;
}

message MerkleLogUnequivocal { }

// The message sent from forestrie to avid notifying that the corresponding
// event is commited to the tenants log.
message MerkleLogCommitMessage {

    // The tenant identity and the event identity for the committed event.
    string tenant_identity = 1;
    string event_identity = 2;
    // The time portion of idtimestamp that contributed to the hash of the event
    google.protobuf.Timestamp timestamp = 3;

    MerkleLogCommit commit = 4;
}

message MerkleLogConfirmMessage {

    string tenant_identity = 1;

    MerkleLogConfirm confirm = 2;
}

message MerkleLogUnequivocalMessage {
    string tenant_identity = 1;
    MerkleLogUnequivocal unequivocal = 2;
}

// The details stored in the SaaS db for a proof mech MERKLE_LOG commitment
message MerkleLogEntry {

    // Event trust level COMMITTED details
    MerkleLogCommit commit = 1;

    // Event trust level CONFIRMED details
    MerkleLogConfirm confirm = 2;

    // Event trust level UNEQUIVOCAL details
    MerkleLogUnequivocal unequivocal = 3;
}