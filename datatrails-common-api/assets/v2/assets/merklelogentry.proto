// Maintainers, please refer to the style guide here:
//     https://developers.google.com/protocol-buffers/docs/style
syntax = "proto3";
package archivist.v2;
option go_package="github.com/datatrails/go-datatrails-common-api-gen/assets/v2/assets;assets";
import "google/protobuf/timestamp.proto";

// MerkeLogCommit provides the log entry details for a single mmr leaf.
message MerkleLogCommit {
    /* The mmr index */
    uint64 index = 1;
    /* The mmr *leaf* index */
    uint64 leaf_index = 2; // TBD: this may be redundant.
    /* time ordered and strictly unique per tenant. system wide
     * unique with very reasonable operational assumptions. */
    fixed64 idtimestamp = 3;
}

message MerkleLogCommitMongoDB {

    // Note that should we ever have more than 2^63  events in a tenant log, the
    // index and leaf_index fields will not persist to mongo.

    /* The mmr index */
    uint64 index = 1;
    /* The mmr *leaf* index */
    uint64 leaf_index = 2; // TBD: this may be redundant.

    /* time ordered and strictly unique per tenant. system wide
     * unique with very reasonable operational assumptions.
     *
     * EXPRESSED AS A 16 character padded hex string because mongo db does not
     * support unsigned integers and we need all 64 bits to get a sensible epoch
     * duration.
     */
    string idtimestamp = 3;
}

// The message sent from forestrie to avid notifying that the corresponding
// event is commited to the tenants log.
message MerkleLogCommitMessage {

    // The tenant identity and the event identity for the committed event.
    string tenant_identity = 1;
    string event_identity = 2;
    /* The time portion of idtimestamp that contributed to the hash of the event
     * (the idtimestamp is _also_ included.
     * This must be copied into event.timestamp_committed when the saas db is updated */
    google.protobuf.Timestamp timestamp = 6;

    uint32 log_version = 3;
    uint32 log_epoch = 4;
    MerkleLogCommit commit = 5;
}



// The details stored in the SaaS db for a proof mech MERKLE_LOG commitment
message MerkleLogEntry {

    // The tenant log version and epoch when the log entry was created.
    uint32 log_version = 1;
    uint32 log_epoch = 2;

    // Event trust level commited fields. Note that we have to use a special
    // message because mongo db does not support unsigned integers. If/when we
    // move away from that, we can move this ordinal safely into a oneof
    MerkleLogCommitMongoDB commit = 3;

    // TODO: Event trust level confirmed fields

    // signature over tenant mmr root

    // TODO: Event trust level uniquivocal fields
}