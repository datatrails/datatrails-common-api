// Maintainers, please refer to the style guide here:
//     https://developers.google.com/protocol-buffers/docs/style
syntax = "proto3";
package archivist.v2;
option go_package="github.com/datatrails/go-datatrails-common-api-gen/assets/v2/assets;assets";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "datatrails-common-api/caps/v1/caps/caps.proto";
import "datatrails-common-api/assets/v2/assets/createasset.proto";
import "datatrails-common-api/assets/v2/assets/assetresponse.proto";
import "datatrails-common-api/assets/v2/assets/getasset.proto";
import "datatrails-common-api/assets/v2/assets/listassets.proto";
import "datatrails-common-api/assets/v2/assets/createevent.proto";
import "datatrails-common-api/assets/v2/assets/eventresponse.proto";
import "datatrails-common-api/assets/v2/assets/getevent.proto";
import "datatrails-common-api/assets/v2/assets/listevents.proto";
import "datatrails-common-api/assets/v2/assets/miscmessages.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Assets API"
        description: "API for asset and event management."
        version: "2.0"
        contact: {
            name: "DataTrails"
            url: "https://www.datatrails.ai"
        }
    };
    base_path: "/archivist/v2/assets";
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    tags: [
        {
            name: "Assets and Events",
            description: "Primary API for Asset management"
        }
   ];
};

service Assets {
    rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse) {
        option (google.api.http) =  {
            get: "/archivist/v2/assets"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "List Assets"
            description: "Retrieves a list of Assets"
            responses: {
                key: "206";
                value: {
                    description:
                    "The number of assets exceeds the servers limit. "
                    "The approximate number of matching results is provided by the "
                    "x-total-count header if the 'x-request-total-count' header on the "
                    "request is set to 'true'. The exact limit is available in the "
                    "content-range header. The value format is "
                    "'items 0-LIMIT/TOTAL'. Note that x-total-count is always "
                    "present for 200 and 206 responses. It is the servers best "
                    "available approximation. Similarly, in any result set, "
                    "you may get a few more than LIMIT items."
                }
            }
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "402";
                value: {
                    description: "Returned when the user's quota of Assets for the given proof mechanism has been reached."
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to list Assets.";
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }

    rpc CreateAsset(CreateAssetRequest) returns (AssetResponse) {
        option (google.api.http) = {
            post: "/archivist/v2/assets"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "Create an Asset"
            description: "Creates an Asset"
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "402";
                value: {
                    description: "Returned when the number of assets would exceed the user's quota"
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to create an Asset.";
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }

    rpc GetAsset(GetAssetRequest) returns (AssetResponse) {
        option (google.api.http) = {
            get: "/archivist/v2/assets/{uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "Retrieves a specific Asset"
            description: "Retrieves a specific Asset"
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to view an Asset.";
                }
            }
            responses: {
                key: "404";
                value: {
                    description: "Returned when the asset with the id does not exist.";
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }

    rpc GetAssetPublicURL(GetAssetPublicURLRequest) returns (PublicAssetURLResponse) {
        option (google.api.http) = {
            get: "/archivist/v2/assets/{uuid}:publicurl"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "Retrieves the public url for a specific Asset."
            description: "Retrieves the public url for a specific Asset."
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to view an Asset.";
                }
            }
            responses: {
                key: "404";
                value: {
                    description: "Returned when the asset with the id does not exist.";
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }

    rpc GetEvent(GetEventRequest) returns (EventResponse) {
        option (google.api.http) =  {
            get: "/archivist/v2/assets/{asset_uuid}/events/{uuid}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "Retrieves Event"
            description: "Retrieves a specific Event"
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to view Event.";
                }
            }
            responses: {
                key: "404";
                value: {
                    description: "Returned when the event does not exist.";
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }

    rpc GetEventPublicURL(GetEventRequest) returns (PublicEventURLResponse) {
        option (google.api.http) = {
            get: "/archivist/v2/assets/{asset_uuid}/events/{uuid}:publicurl"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "Retrieves the public url for a specific Event."
            description: "Retrieves the public url for a specific Event."
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to view an Asset.";
                }
            }
            responses: {
                key: "404";
                value: {
                    description: "Returned when the asset with the id does not exist.";
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }

    rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
        option (google.api.http) =  {
            get: "/archivist/v2/assets/{uuid}/events"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "List Events"
            description: "Lists Events"
            responses: {
                key: "206";
                value: {
                    description:
                    "The number of events exceeds the servers limit. "
                    "The approximate number of matching results is "
                    "provided by the x-total-count header, the exact "
                    "limit is available in the content-range header. The "
                    "value format is 'items 0-LIMIT/TOTAL'. "
                    " Note that x-total-count is always present for 200 and "
                    "206 responses. It is the servers best available "
                    "approximation. Similarly, in any result set, you "
                    "may get a few more than LIMIT items."
                }
            }

            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to list Events.";
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }

    rpc GetCaps(archivist.v1.GetCapsRequest) returns (archivist.v1.Caps) {
        option (google.api.http) =  {
            get: "/archivist/v2/assets:caps"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events", "Unsupported" ]  // Unsupported is signal for future OAPI parsing
            summary: "Get remaining capped resources for Assets"
            description: "Not stable or officially supported. Get remaining capped resources for Assets"
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }
}

service Events {
    rpc Create(CreateEventRequest) returns (EventResponse) {
        option (google.api.http) = {
            post: "/archivist/v2/assets/{uuid}/events"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: [ "Assets and Events" ]
            summary: "Creates an Event"
            description: "Creates an Event"
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "402";
                value: {
                    description: "Returned when the user's quota of Events has been reached."
                }
            }
            responses: {
                key: "429";
                value: {
                    description: "Returned when a user exceeds their subscription's rate limit for requests.";
                }
            }
        };
    }
}

