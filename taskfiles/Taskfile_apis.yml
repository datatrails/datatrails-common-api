---
# NOTICE: WHEN ADDING A SERVICE, CLIENT or ANY PROGRAM
#
#         Use the name of the directory containing your main.go as the NAME
#         variable when invoking build-any
#
#         This will be automatically consistent with the binary names chosen
#         by go install

version: '3'

# Environment variables set for all commands.
env_build: &env_build
  # XDG_CACHE_HOME: This may need to be set for python builds, but try to use
  # virtual env instead.

  # The GOCACHE in a linux container on Docker for windows MUST be on a linuxy
  # file system
  GOCACHE: /tmp/datatrails/go-datatrails-common-api


vars:

  # DESTDIR
  # The path, relative to the api dir, where the outputs should be rooted.
  # * The common apis are exported to DESTDIR/api
  # * The necessary upstream includes are exported to DESTDIR/proto-include
  #
  # When using DESTDIR to create output paths, do NOT insert '/' characters.
  # Please do {{.DESTDIR}}{{.OUTDIR}} rather than {{.DESTDIR}}/{{.OUTDIR}}
  # Note that making DESTDIR=. does not work (cp same file to same file)
  # 
  DESTDIR: '{{.DESTDIR | default "../exported/"}}'

  # see https://github.com/golang/protobuf/issues/143
  # field_mask is a well known type that is recommend for use with UPDATE
  # requests and with GET requests where the subject is large. It has been a
  # google 'well known type' for ages. However due to issues google have with
  # internal apis overlapping it, it is not published in the same way. There
  # appears to be an on going effort/pantomime trying to align these public
  # and internal types. The following variable MUST be included in protoc
  # --go_out value in order to ensure the generated code has the correct
  # imports
  GOPKG_OVERRIDES: ",Mgoogle/protobuf/field_mask.proto=google.golang.org/genproto/protobuf/field_mask"

  # Upstream proto definition files are placed here by the bootstrap tasks
  GOOGLE_COMMON_PROTOS_VERSION: '{{.GOOGLE_COMMON_PROTOS_VERSION | default "1.50.0"}}'
  GOOGLE_COMMON_INC_ARCHIVE_BASEDIR: '{{.GOOGLE_COMMON_INC_ARCHIVE_BASEDIR | default "api-common-protos"}}'

tasks:

  bootstrap:
    desc: |
      download the third party proto definitions we require under proto-include

      If you have the correct version of go installed, this is sufficient to
      enable a host build without recourse to the builder image.

    cmds:
      - task: bootstrap:googleapis
      - task: bootstrap:grpc_health

  bootstrap:googleapis:
    desc: download and prepare the google api proto definitions under proto-include
    dir: '..'
    cmds:
      - |
        rm -rf proto-include/google
        mkdir -p proto-include

        curl -fsSOL https://github.com/googleapis/api-common-protos/archive/refs/tags/{{.GOOGLE_COMMON_PROTOS_VERSION}}.tar.gz
        tar -xvzf {{.GOOGLE_COMMON_PROTOS_VERSION}}.tar.gz
        mv {{.GOOGLE_COMMON_INC_ARCHIVE_BASEDIR}}-{{.GOOGLE_COMMON_PROTOS_VERSION}}/google \
          proto-include/
        rm -f {{.GOOGLE_COMMON_PROTOS_VERSION}}.tar.gz
        rm -rf {{.GOOGLE_COMMON_INC_ARCHIVE_BASEDIR}}-{{.GOOGLE_COMMON_PROTOS_VERSION}}
        find proto-include -type d


  bootstrap:grpc_health:
    desc: download and prepare the grpc health definitions we require under proto-include
    dir: '..'
    cmds:
      - |
        rm -rf proto-include/grpc/health/v1
        mkdir -p proto-include/grpc/health/v1
        curl -fsSOL https://raw.githubusercontent.com/grpc/grpc-proto/master/grpc/health/v1/health.proto
        mv health.proto proto-include/grpc/health/v1/
        ls -la proto-include/grpc/health/v1/

  clean:generated:
    desc: delete generated proto buf code
    dir: '../datatrails-common-api'
    cmds:
      - for ff in $(find . -name "*.pb*.go"); do rm -f $ff; done
      - for ff in $(find . -name "*.swagger.json"); do rm -f $ff; done

  preflight:
    summary: run prior to api generation tasks
    dir: '../datatrails-common-api'
    cmds:
      - |
        go mod download
        go get github.com/datatrails/go-datatrails-common-api-gen/tools

        go install \
          github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \
          github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \
          google.golang.org/protobuf/cmd/protoc-gen-go \
          google.golang.org/grpc/cmd/protoc-gen-go-grpc \
          github.com/envoyproxy/protoc-gen-validate \
          github.com/lyft/protoc-gen-star/v2 \
          github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc

  postflight:
    summary: run after all api generation tasks
    dir: '../datatrails-common-api'
    cmds:
      - go mod tidy
      - task: build


  generate:
    desc: generate api grpc bindings
    dir: '../datatrails-common-api'
    cmds:
      - task: preflight
      - task: all-apis
      - task: postflight

  test:
    summary: run after all api generation tasks
    dir: '../datatrails-common-api'
    cmds:
      - |
        go build ./...
        go test ./...


  export:
    desc: export the sources to the desired DESTDIR
    dir: '../datatrails-common-api'
    vars:
      SOURCES: >-
        marshalers
        tools
        go.mod
        go.sum
      APIS: >-
        assets/v2/assets
        attribute/v2/attribute
        caps/v1/caps
        filter/v1/filter
      # The defaults match the expectations of .github/workflows/ci.yml
      COMMON_GODIR: go-datatrails-common-api-gen
      COMMON_PROTODIR: datatrails-common-api
    cmds:
      - |
        mkdir -p {{.DESTDIR}}{{.COMMON_GODIR}}
        for name in {{.SOURCES}}; do
          cp -vr ${name} {{.DESTDIR}}{{.COMMON_GODIR}}/
        done

        mkdir -p {{.DESTDIR}}/proto-include/{{.COMMON_PROTODIR}}
        mkdir -p {{.DESTDIR}}/swagger

        # The source protos are all gathered under a 'google' common top dir
        cp -vr ../proto-include/* {{.DESTDIR}}proto-include/

        for api in {{.APIS}}; do
          mkdir -vp {{.DESTDIR}}{{.COMMON_GODIR}}/${api}
          cp -vr ${api}/*.go {{.DESTDIR}}{{.COMMON_GODIR}}/${api}
          mkdir -vp {{.DESTDIR}}swagger/${api}
          cp -vr ${api}/*.swagger.json {{.DESTDIR}}swagger/${api}
          mkdir -vp {{.DESTDIR}}proto-include/{{.COMMON_PROTODIR}}/${api}
          cp -vr ${api}/*.proto {{.DESTDIR}}proto-include/{{.COMMON_PROTODIR}}/${api}
        done


  all-apis:
    summary: generate code for all interfaces and copy related sources
    dir: '../datatrails-common-api'
    deps:
      - task: assetsv2-api
      - task: attributev2-api
      - task: capsv1-api
      - task: filterv1-api
    cmds:
      # dummy command, so api gen runs in parallel (deps do this automatically)
      - true

  assetsv2-api:
    summary: Generate the assetsv2 api
    cmds:
      - task: any-api
        vars: {API: "assets/v2/assets" }
  attributev2-api:
    summary: Generate the attributev2 api
    cmds:
      - task: any-api
        vars: {API: "attribute/v2/attribute" }

  capsv1-api:
    summary: Generate the filters api
    cmds:
      - task: any-api
        vars: {API: "caps/v1/caps" }

  filterv1-api:
    summary: Generate the filters api
    cmds:
      - task: any-api
        vars: {API: "filter/v1/filter" }

  any-api:
    # dev-notes/build-warts.md#always-set-dir-relative-to-current-task-file
    dir: '..'
    # summary: Generate the service grpc stubs, rest http proxy and swagger json for any api
    #
    cmds:
      # Generate the gRPC service stub
      # Generates the HTTP reverse proxy for the gRPC service.
      # Generates the swagger definitions for the gRPC service.
      # Generates the html docs for the gRPC service.
      - |
        protoc -I {{.SELF_INC}} {{.PROTOC_INC}} \
         --go_out=paths=source_relative:{{.OUTPATH}} \
         --go-grpc_out=paths=source_relative:{{.OUTPATH}} \
         --validate_out=lang=go,paths=source_relative:{{.OUTPATH}} \
         --openapiv2_out={{.OUTPATH}} \
         --openapiv2_opt disable_default_errors=true \
         --openapiv2_opt json_names_for_fields=false \
         --openapiv2_opt logtostderr=true \
         --grpc-gateway_out=paths=source_relative,logtostderr=true:{{.OUTPATH}} \
         --plugin {{.GOBIN}}/protoc-gen-doc \
         --doc_out={{.SRCPATH}}{{.API}}/ \
         --doc_opt={{.SRCPATH}}confluence_doc.tmpl,{{.SRCPATH}}confluence.storage \
         {{.SRCPATH}}{{.API}}/*.proto
    vars:
      SRCPATH: datatrails-common-api/
      # OUTPATH: datatrails-common-api
      OUTPATH: . 
      GOBIN:
        sh: echo ${GOBIN:-$HOME/go/bin}
      # These variables capture the locations that .proto files for third party
      # packages can be found at. The locations can change as a consequence of go
      # mod module updates, so we require a dynamic approach.  The particularly
      # grotty bit is the -f  argment - we need to pass -f {{.Dir}} to the go list
      # command. To do so we have to prevent go template from evaluating it.
      #
      PROTO_GEN_GO_DIR:
        # Notice; the tricksy 'cd datatrails-common-api' rather than just
        # running in that directory via tasks 'dir:' directive is so that we can
        # have the same import statements in the proto files *everywhere*. All
        # consumers of datatrails-common-api get to do things very simply in
        # return for this. AND it makes iteratively generating proto changes
        # across repositories a lot more efficient
        sh: |
          cd datatrails-common-api
          echo $(GOCACHE=/tmp/datatrails/go-datatrails-common-api/api go list -f {{"{{"}}.Dir{{"}}"}} google.golang.org/protobuf/cmd/protoc-gen-go)

      GRPC_GATEWAY_DIR:
        sh: |
          cd datatrails-common-api
          echo $(dirname $(GOCACHE=/tmp/datatrails/go-datatrails-common-api/api go list -f {{"{{"}}.Dir{{"}}"}} github.com/grpc-ecosystem/grpc-gateway/v2/runtime))
      ENVOY_VALIDATE:
        sh: |
          cd datatrails-common-api
          echo $(GOCACHE=/tmp/datatrails/go-datatrails-common-api/api go list -f {{"{{"}}.Dir{{"}}"}} github.com/envoyproxy/protoc-gen-validate)
      
      SELF_INC: .

      # Global includes used for all protoc invocations.
      # task sets cwd initially to the directory of the Taskfile.yml
      PROTOC_INC: "-I {{.ENVOY_VALIDATE}} \
        -I {{.PROTO_GEN_GO_DIR}} \
        -I {{.GRPC_GATEWAY_DIR}} \
        -I proto-include"