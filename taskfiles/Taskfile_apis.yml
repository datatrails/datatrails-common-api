---
# NOTICE: WHEN ADDING A SERVICE, CLIENT or ANY PROGRAM
#
#         Use the name of the directory containing your main.go as the NAME
#         variable when invoking build-any
#
#         This will be automatically consistent with the binary names chosen
#         by go install

version: '3'

# Environment variables set for all commands.
env_build: &env_build
  # XDG_CACHE_HOME: This may need to be set for python builds, but try to use
  # virtual env instead.

  # The GOCACHE in a linux container on Docker for windows MUST be on a linuxy
  # file system
  GOCACHE: /tmp/jitsuin/rkvstcommon-api


vars:

  # DESTDIR
  # The path, relative to the api dir, where the outputs should be rooted.
  #
  # When using DESTDIR to create output paths, do NOT insert '/' characters.
  # Please do {{.DESTDIR}}{{.OUTDIR}} rather than {{.DESTDIR}}/{{.OUTDIR}}
  # Note that making DESTDIR=. does not work (cp same file to same file)
  DESTDIR: '{{.DESTDIR | default "../exported/api/"}}'


  # see https://github.com/golang/protobuf/issues/143
  # field_mask is a well known type that is recommend for use with UPDATE
  # requests and with GET requests where the subject is large. It has been a
  # google 'well known type' for ages. However due to issues google have with
  # internal apis overlapping it, it is not published in the same way. There
  # appears to be an on going effort/pantomime trying to align these public
  # and internal types. The following variable MUST be included in protoc
  # --go_out value in order to ensure the generated code has the correct
  # imports
  GOPKG_OVERRIDES: ",Mgoogle/protobuf/field_mask.proto=google.golang.org/genproto/protobuf/field_mask"

tasks:

  generate:
    desc: generate api grpc bindings
    dir: '../api'
    cmds:
      - task: preflight
      - task: all-api
      - task: postflight

  export:
    desc: export the sources to the desired DESTDIR
    dir: '../api'
    vars:
      SOURCES: >-
        marshalers
        simplehash
        go.mod
        go.sum
      APIS: >-
        assets/v2/assets
        attribute/v2/attribute
        caps/v1/caps
        filter/v1/filter
    cmds:
      - |
        mkdir -p {{.DESTDIR}}
        for name in {{.SOURCES}}; do
          cp -vr ${name} {{.DESTDIR}}
        done
        for api in {{.APIS}}; do
          mkdir -vp {{.DESTDIR}}${api}
          cp -vr ${api}/*.go {{.DESTDIR}}${api}/
          cp -vr ${api}/*.swagger.json {{.DESTDIR}}${api}/
          cp -vr ${api}/*.proto {{.DESTDIR}}${api}/
        done


  all-api:
    summary: generate code for all interfaces and copy related sources
    dir: '../api'
    deps:
      - task: assetsv2-api
      - task: attributev2-api
      - task: capsv1-api
      - task: filterv1-api
    cmds:
      # dummy command, so api gen runs in parallel (deps do this automatically)
      - true

  preflight:
    summary: run prior to api generation tasks
    dir: '../api'
    cmds:
      - |
        go mod download

  postflight:
    summary: run after all api generation tasks
    dir: '../api'
    cmds:
      - |
        go mod tidy

  assetsv2-api:
    summary: Generate the assetsv2 api
    cmds:
      - task: any-api
        vars: {API: "assets/v2/assets" }
  attributev2-api:
    summary: Generate the attributev2 api
    cmds:
      - task: any-api
        vars: {API: "attribute/v2/attribute" }

  capsv1-api:
    summary: Generate the filters api
    cmds:
      - task: any-api
        vars: {API: "caps/v1/caps" }

  filterv1-api:
    summary: Generate the filters api
    cmds:
      - task: any-api
        vars: {API: "filter/v1/filter" }

  any-api:
    # dev-notes/build-warts.md#always-set-dir-relative-to-current-task-file
    dir: '../api'
    # summary: Generate the service grpc stubs, rest http proxy and swagger json for any api
    #
    cmds:
      # Generate the gRPC service stub
      # Generates the HTTP reverse proxy for the gRPC service.
      # Generates the swagger definitions for the gRPC service.
      # Generates the html docs for the gRPC service.
      - |
        protoc -I . {{.PROTOC_INC}} \
         --go_out=paths=source_relative:. \
         --go-grpc_out=paths=source_relative:. \
         --validate_out=lang=go,paths=source_relative:. \
         --openapiv2_out=. \
         --openapiv2_opt disable_default_errors=true \
         --openapiv2_opt json_names_for_fields=false \
         --openapiv2_opt logtostderr=true \
         --grpc-gateway_out=paths=source_relative,logtostderr=true:. \
         --plugin /go/bin/protoc-gen-doc \
         --doc_out={{.API}}/ \
         --doc_opt=confluence_doc.tmpl,confluence.storage \
         {{.API}}/*.proto
    vars:
      # These variables capture the locations that .proto files for third party
      # packages can be found at. The locations can change as a consequence of go
      # mod module updates, so we require a dynamic approach.  The particularly
      # grotty bit is the -f  argment - we need to pass -f {{.Dir}} to the go list
      # command. To do so we have to prevent go template from evaluating it.
      #
      PROTO_GEN_GO_DIR:
        # NOTICE: You need to set GOCACHE for any go commands
        sh: echo $(GOCACHE=/tmp/jitsuin/rkvstcommon-api/api go list -f {{"{{"}}.Dir{{"}}"}} google.golang.org/protobuf/cmd/protoc-gen-go )
      GRPC_GATEWAY_DIR:
        sh: echo $(dirname $(GOCACHE=/tmp/jitsuin/rkvstcommon-api/api go list -f {{"{{"}}.Dir{{"}}"}} github.com/grpc-ecosystem/grpc-gateway/v2/runtime))
      ENVOY_VALIDATE:
        sh: echo $(GOCACHE=/tmp/jitsuin/rkvstcommon-api/api go list -f {{"{{"}}.Dir{{"}}"}} github.com/envoyproxy/protoc-gen-validate)

      # Global includes used for all protoc invocations.
      # task sets cwd initially to the directory of the Taskfile.yml
      PROTOC_INC: "-I {{.ENVOY_VALIDATE}} \
        -I {{.PROTO_GEN_GO_DIR}} \
        -I {{.GRPC_GATEWAY_DIR}} \
        -I /usr/local/api-common-protos-master/"